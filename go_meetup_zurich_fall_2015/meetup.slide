Writing JSON REST APIs in Go
A Primer
14 Oct 2015

Stephan Dollberg
stephan.dollberg@gmail.com

* Golang Usecases

.image microservices.png _ 600

* Why

- Go and Go community are awesome
- Easy deployment
- Good tools
- Performance

* Why: Performance

http://blog.parse.com/learn/how-we-moved-our-api-from-ruby-to-go-and-saved-our-sanity/

- _"Our_reliability_improved_by_an_order_of_magnitude."_
- _"We_could_downsize_our_provisioned_API_server_pool_by_about_90%."_
- _"..._the_time_to_do_a_full_API_server_deploy_with_rolling_restarts_dropped_from_30_minutes_to_3_minutes."_

https://blog.repustate.com/migrating-entire-api-go-python/

- _"We_reduced_the_number_of_EC2_instances_required_by_85%"_
- _"..._reducing_the_mean_response_time_of_an_API_call_from_100ms_to_10ms"_

* JSON in Go

.image go_related_tags.png _ 600

* JSON in Go: Maps

.code demo/jsondemo/json.go /^func StringStringMap/,/^}


* JSON in Go: Maps

.code demo/jsondemo/json.go /^func StringStringMap/,/^}

    Output: Hello Go!

* JSON in Go: Maps

.code demo/jsondemo/json.go /^func StringInterfaceMap/,/^}

* JSON in Go: Maps

.code demo/jsondemo/json.go /^func StringInterfaceMap/,/^}

    Output: Hello Go! 12345

* JSON in Go: Structs

.code demo/jsondemo/json.go /^type Msg1/,/^}/
.code demo/jsondemo/json.go /^func UnexportedStruct/,/^}/


* JSON in Go: Structs

.code demo/jsondemo/json.go /^type Msg1/,/^}/
.code demo/jsondemo/json.go /^func UnexportedStruct/,/^}/

    Output: 0


* JSON in Go: Structs

.code demo/jsondemo/json.go /^type Msg2/,/^}/
.code demo/jsondemo/json.go /^func ExportedStruct/,/^}/

* JSON in Go: Structs

.code demo/jsondemo/json.go /^type Msg2/,/^}/
.code demo/jsondemo/json.go /^func ExportedStruct/,/^}/

    Output: Hello Go! 12345
            {"Msg":"Hello Go!","Id":12345}


* JSON in Go: Structs

.code demo/jsondemo/json.go /^type Msg3/,/^}/
.code demo/jsondemo/json.go /^func WithTags/,/^}/


* JSON in Go: Structs

.code demo/jsondemo/json.go /^type Msg3/,/^}/
.code demo/jsondemo/json.go /^func WithTags/,/^}/

    Output: Hello Go! 12345
            {"msg":"Hello Go!","id":12345}

* JSON in Go: Anonymous structs

.code demo/jsondemo/json.go /^func AnonymousStruct/,/^}/

* JSON in Go: Anonymous structs

.code demo/jsondemo/json.go /^func AnonymousStruct/,/^}/

    Output: Hello Go! 12345

* JSON in Go: Other Tricks

.code demo/jsondemo/json.go /^type OmitEmptyStruct/,/^}/
.code demo/jsondemo/json.go /^func OmitEmpty/,/^}/

* JSON in Go: Other Tricks

.code demo/jsondemo/json.go /^type OmitEmptyStruct/,/^}/
.code demo/jsondemo/json.go /^func OmitEmpty/,/^}/

    Output: {"id":123}


* JSON in Go: Other Tricks

.code demo/jsondemo/json.go /^type RawMessageStruct/,/^}/
.code demo/jsondemo/json.go /^func RawMessage/,/^}/

* JSON in Go: Other Tricks

.code demo/jsondemo/json.go /^type RawMessageStruct/,/^}/
.code demo/jsondemo/json.go /^func RawMessage/,/^}/

    Output: map[foo:1 bar:2]


* JSON in Go: Caveats

- Reference Types
- Write to nil map
- Reading is fine

* JSON API using net/http

* Go-Json-Rest

Go-Json-Rest by Antoine Imbert

github.com/ant0ine/go-json-rest

github.com/ant0ine/go-json-rest-examples

* Handlers with Go-Json-Rest

    func MyRestHandler(w rest.ResponseWriter, r *rest.Request) { // HL
        w.WriteJson(map[string]string{"hello": "world"})
    }

    func main() {
        api := rest.NewApi()

        router, _ := rest.MakeRouter(
            &rest.Route{"GET", "/", MyRestHandler},
        )

        api.SetApp(router)
        http.Handle("/", api.MakeHandler())
        http.ListenAndServe("localhost:8080", nil)
    }

* Space Gallery

(Demo)

* Setting Up Go-Json-Rest

    api := rest.NewApi()
    api.Use(rest.DefaultDevStack...)

    router, err := rest.MakeRouter(
        &rest.Route{"GET", "/pics/:id", singlePic},
        &rest.Route{"POST", "/pics/:id/like", likePic},
        &rest.Route{"GET", "/pics", allPics},
        &rest.Route{"GET", "/comments/:id", singleComment},
        &rest.Route{"POST", "/comments", createComment},
    )

    // rest as before

* CRUD

.code demo/main.go /^func singleComment/,/^}/


* Middlewares

    // logging, json indenting, stacktrace on panic
    api.Use(rest.DefaultDevStack...)

    // add cors to app
    api.Use(&rest.CorsMiddleware{
        RejectNonCorsRequests: false,
        OriginValidator: func(origin string, request *rest.Request) bool {
            return origin == "https://spacebook.com"
        },
        AllowedMethods: []string{"GET", "POST", "PUT"},
        AllowedHeaders: []string{
            "Accept", "Content-Type", "X-Custom-Header", "Origin"},
        AccessControlAllowCredentials: true,
        AccessControlMaxAge:           3600,
    })

* JWT Authentication

Authentication is handle automatically:

    jwtMiddleware := &jwt.JWTMiddleware{
        Key:           []byte("super secret key"),
        Realm:         "Spacebook",
        Timeout:       time.Hour,
        MaxRefresh:    time.Hour * 24,
        Authenticator: authUser,
    }

Selectively activate middleware:

    api.Use(&rest.IfMiddleware{
        Condition: func(request *rest.Request) bool {
            return request.URL.Path != "/login" && request.Method == "POST"
        },
        IfTrue: jwtMiddleware,
    })

* JWT Authentication

    func createComment(w rest.ResponseWriter, r *rest.Request) {
        c := &Comment{}
        err := r.DecodeJsonPayload(c)
        if err != nil {
            rest.Error(w, "invalid comment", http.StatusBadRequest)
            return
        }

        if pic, ok := picStore[c.PicId]; ok {
            c.UserId = r.Env["REMOTE_USER"].(string)
            c.Id = rand.Uint32()
            commentStore[c.Id] = c
            pic.Comments = append(pic.Comments, c.Id)
            w.WriteJson(c)
        }
    }

* Bcrypt

    func authUser(userId string, passwordClaim string) bool {
        if user, ok := userStore[userId]; ok {
            return bcrypt.CompareHashAndPassword(user.Password, []byte(passwordClaim)) == nil
        }
        return false
    }

* There are more!

- Gzip
- TokenAuth
- BasicAuth
- Stats
- ...

* x/net/context

_A_Context_carries_a_deadline,_a_cancelation_signal,_and_other_values_across_API_boundaries._

    type Context interface {
        Deadline() (deadline time.Time, ok bool)
        Done() <-chan struct{}
        Err() error
        Value(key interface{}) interface{}
    }

    func WithCancel(parent Context) (ctx Context, cancel CancelFunc)
    func WithDeadline(parent Context, deadline time.Time) (Context, CancelFunc)
    func WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc)
    func WithValue(parent Context, key interface{}, val interface{}) Context

* x/net/context main package

.code demo/contextdemo/context.go /^func handler/,/^}/

* x/net/context city package

.code demo/cityapi/city.go /START OMIT/,/END OMIT/

* x/net/context weather package

.code demo/weatherapi/weather.go /^func Query/,/^}/

* x/net/context weather package

.code demo/weatherapi/weather.go /^func getImpl/,/^}/

* x/net/context weather package

.code demo/weatherapi/weather.go /^func httpDo/,/^}/
